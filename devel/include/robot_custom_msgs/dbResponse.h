// Generated by gencpp from file robot_custom_msgs/dbResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_CUSTOM_MSGS_MESSAGE_DBRESPONSE_H
#define ROBOT_CUSTOM_MSGS_MESSAGE_DBRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_custom_msgs
{
template <class ContainerAllocator>
struct dbResponse_
{
  typedef dbResponse_<ContainerAllocator> Type;

  dbResponse_()
    : tableid(0)
    , target_pick_position_x(0.0)
    , target_pick_position_y(0.0)
    , target_pick_position_z(0.0)
    , target_pick_orientation_x(0.0)
    , target_pick_orientation_y(0.0)
    , target_pick_orientation_z(0.0)
    , target_pick_orientation_w(0.0)
    , target_place_position_x(0.0)
    , target_place_position_y(0.0)
    , target_place_position_z(0.0)
    , target_place_orientation_x(0.0)
    , target_place_orientation_y(0.0)
    , target_place_orientation_z(0.0)
    , target_place_orientation_w(0.0)
    , text()  {
    }
  dbResponse_(const ContainerAllocator& _alloc)
    : tableid(0)
    , target_pick_position_x(0.0)
    , target_pick_position_y(0.0)
    , target_pick_position_z(0.0)
    , target_pick_orientation_x(0.0)
    , target_pick_orientation_y(0.0)
    , target_pick_orientation_z(0.0)
    , target_pick_orientation_w(0.0)
    , target_place_position_x(0.0)
    , target_place_position_y(0.0)
    , target_place_position_z(0.0)
    , target_place_orientation_x(0.0)
    , target_place_orientation_y(0.0)
    , target_place_orientation_z(0.0)
    , target_place_orientation_w(0.0)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _tableid_type;
  _tableid_type tableid;

   typedef double _target_pick_position_x_type;
  _target_pick_position_x_type target_pick_position_x;

   typedef double _target_pick_position_y_type;
  _target_pick_position_y_type target_pick_position_y;

   typedef double _target_pick_position_z_type;
  _target_pick_position_z_type target_pick_position_z;

   typedef double _target_pick_orientation_x_type;
  _target_pick_orientation_x_type target_pick_orientation_x;

   typedef double _target_pick_orientation_y_type;
  _target_pick_orientation_y_type target_pick_orientation_y;

   typedef double _target_pick_orientation_z_type;
  _target_pick_orientation_z_type target_pick_orientation_z;

   typedef double _target_pick_orientation_w_type;
  _target_pick_orientation_w_type target_pick_orientation_w;

   typedef double _target_place_position_x_type;
  _target_place_position_x_type target_place_position_x;

   typedef double _target_place_position_y_type;
  _target_place_position_y_type target_place_position_y;

   typedef double _target_place_position_z_type;
  _target_place_position_z_type target_place_position_z;

   typedef double _target_place_orientation_x_type;
  _target_place_orientation_x_type target_place_orientation_x;

   typedef double _target_place_orientation_y_type;
  _target_place_orientation_y_type target_place_orientation_y;

   typedef double _target_place_orientation_z_type;
  _target_place_orientation_z_type target_place_orientation_z;

   typedef double _target_place_orientation_w_type;
  _target_place_orientation_w_type target_place_orientation_w;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::robot_custom_msgs::dbResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_custom_msgs::dbResponse_<ContainerAllocator> const> ConstPtr;

}; // struct dbResponse_

typedef ::robot_custom_msgs::dbResponse_<std::allocator<void> > dbResponse;

typedef boost::shared_ptr< ::robot_custom_msgs::dbResponse > dbResponsePtr;
typedef boost::shared_ptr< ::robot_custom_msgs::dbResponse const> dbResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_custom_msgs::dbResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_custom_msgs::dbResponse_<ContainerAllocator1> & lhs, const ::robot_custom_msgs::dbResponse_<ContainerAllocator2> & rhs)
{
  return lhs.tableid == rhs.tableid &&
    lhs.target_pick_position_x == rhs.target_pick_position_x &&
    lhs.target_pick_position_y == rhs.target_pick_position_y &&
    lhs.target_pick_position_z == rhs.target_pick_position_z &&
    lhs.target_pick_orientation_x == rhs.target_pick_orientation_x &&
    lhs.target_pick_orientation_y == rhs.target_pick_orientation_y &&
    lhs.target_pick_orientation_z == rhs.target_pick_orientation_z &&
    lhs.target_pick_orientation_w == rhs.target_pick_orientation_w &&
    lhs.target_place_position_x == rhs.target_place_position_x &&
    lhs.target_place_position_y == rhs.target_place_position_y &&
    lhs.target_place_position_z == rhs.target_place_position_z &&
    lhs.target_place_orientation_x == rhs.target_place_orientation_x &&
    lhs.target_place_orientation_y == rhs.target_place_orientation_y &&
    lhs.target_place_orientation_z == rhs.target_place_orientation_z &&
    lhs.target_place_orientation_w == rhs.target_place_orientation_w &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_custom_msgs::dbResponse_<ContainerAllocator1> & lhs, const ::robot_custom_msgs::dbResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_custom_msgs::dbResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_custom_msgs::dbResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_custom_msgs::dbResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d43bda5143fd7d192dd6191338cdba5e";
  }

  static const char* value(const ::robot_custom_msgs::dbResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd43bda5143fd7d19ULL;
  static const uint64_t static_value2 = 0x2dd6191338cdba5eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_custom_msgs/dbResponse";
  }

  static const char* value(const ::robot_custom_msgs::dbResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#output\n"
"int64 tableid\n"
"\n"
"float64 target_pick_position_x\n"
"float64 target_pick_position_y\n"
"float64 target_pick_position_z\n"
"\n"
"float64 target_pick_orientation_x\n"
"float64 target_pick_orientation_y\n"
"float64 target_pick_orientation_z\n"
"float64 target_pick_orientation_w\n"
"\n"
"float64 target_place_position_x\n"
"float64 target_place_position_y\n"
"float64 target_place_position_z\n"
"\n"
"float64 target_place_orientation_x\n"
"float64 target_place_orientation_y\n"
"float64 target_place_orientation_z\n"
"float64 target_place_orientation_w\n"
"\n"
"string text\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot_custom_msgs::dbResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tableid);
      stream.next(m.target_pick_position_x);
      stream.next(m.target_pick_position_y);
      stream.next(m.target_pick_position_z);
      stream.next(m.target_pick_orientation_x);
      stream.next(m.target_pick_orientation_y);
      stream.next(m.target_pick_orientation_z);
      stream.next(m.target_pick_orientation_w);
      stream.next(m.target_place_position_x);
      stream.next(m.target_place_position_y);
      stream.next(m.target_place_position_z);
      stream.next(m.target_place_orientation_x);
      stream.next(m.target_place_orientation_y);
      stream.next(m.target_place_orientation_z);
      stream.next(m.target_place_orientation_w);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dbResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_custom_msgs::dbResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_custom_msgs::dbResponse_<ContainerAllocator>& v)
  {
    s << indent << "tableid: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tableid);
    s << indent << "target_pick_position_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_position_x);
    s << indent << "target_pick_position_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_position_y);
    s << indent << "target_pick_position_z: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_position_z);
    s << indent << "target_pick_orientation_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_orientation_x);
    s << indent << "target_pick_orientation_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_orientation_y);
    s << indent << "target_pick_orientation_z: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_orientation_z);
    s << indent << "target_pick_orientation_w: ";
    Printer<double>::stream(s, indent + "  ", v.target_pick_orientation_w);
    s << indent << "target_place_position_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_position_x);
    s << indent << "target_place_position_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_position_y);
    s << indent << "target_place_position_z: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_position_z);
    s << indent << "target_place_orientation_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_orientation_x);
    s << indent << "target_place_orientation_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_orientation_y);
    s << indent << "target_place_orientation_z: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_orientation_z);
    s << indent << "target_place_orientation_w: ";
    Printer<double>::stream(s, indent + "  ", v.target_place_orientation_w);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CUSTOM_MSGS_MESSAGE_DBRESPONSE_H
